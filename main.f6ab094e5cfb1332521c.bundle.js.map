{"version":3,"file":"main.f6ab094e5cfb1332521c.bundle.js","sources":["webpack:///./src/index.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\n\nconst commands = {\n    lift: 'lift',\n    moveUp: 'move up',\n    moveDown: 'move down',\n    drop: 'drop',\n};\n\nconst parseCommand = transcript =>\n    Object.keys(commands).reduce((accum, command) => {\n        if (accum !== '') return accum;\n\n        if (transcript.includes(commands[command])) {\n            return commands[command];\n        }\n\n        return accum;\n    }, '');\n\nconst parseCommandMeta = (command, transcript) => {\n    switch (command) {\n        case commands.lift:\n            return { itemId: transcript.split(commands.lift)[1].trim() || '' };\n            break;\n        default:\n            break;\n    }\n};\n\nfunction voiceSensor(api) {\n    let speech;\n\n    const [command, setCommand] = useState({\n        text: '',\n        count: 0,\n    });\n    const [drag, setDrag] = useState(null);\n\n    useEffect(() => {\n        speech = new webkitSpeechRecognition() || speechRecognition();\n        speech.continuous = true;\n        speech.interimResults = false;\n        speech.lang = 'en-US';\n\n        speech.start();\n\n        speech.onresult = event => {\n            console.log('onresult');\n            setCommand({\n                text: event.results[event.results.length - 1][0].transcript,\n                count: (command.count += 1),\n            });\n        };\n\n        speech.onerror = event => {\n            console.error(event.error);\n        };\n\n        speech.onend = () => {\n            console.log('onend');\n\n            /**\n             * SpeechRecognition stops automatically after inactivity.\n             * We want it to keep going until we tell it to stop\n             */\n            // speech.start();\n        };\n\n        return () => {\n            console.log('DISMOUNT');\n\n            speech.stop();\n        };\n    }, []);\n\n    useEffect(() => {\n        const transcript = command.text.toLowerCase();\n        const currentCommand = parseCommand(transcript);\n        const commandMeta = parseCommandMeta(currentCommand, transcript);\n\n        switch (currentCommand) {\n            case commands.lift:\n                console.log('action', commands.lift, commandMeta);\n                const preDrag = api.tryGetLock(commandMeta.itemId);\n                if (!preDrag) return;\n                setDrag(preDrag.snapLift());\n                break;\n            case commands.moveUp:\n                console.log('action', commands.moveUp);\n                if (!drag) return;\n                drag.moveUp();\n                break;\n            case commands.moveDown:\n                console.log('action', commands.moveDown);\n                if (!drag) return;\n                drag.moveDown();\n                break;\n            case commands.drop:\n                console.log('action', commands.drop);\n                if (!drag) return;\n                drag.drop();\n                setDrag(null);\n                break;\n            default:\n                console.log('BREAK', currentCommand);\n                break;\n        }\n    }, [command.text, command.count]);\n\n    console.log(command);\n}\n\nexport default voiceSensor;\n"],"mappings":"AAEA","sourceRoot":""}